# -*- coding:utf-8 -*-

# A simple example using the HTTP plugin that shows the retrieval of a
# single page via HTTP.
#
# This script is automatically generated by ngrinder.
#
# @author ${userName}
from net.grinder.script.Grinder import grinder
from net.grinder.script import Test

from org.ngrinder.http import HTTPRequest, HTTPRequestControl, HTTPResponse, CookieManager

from okhttp3 import Headers, Cookie

# if you want to increase the timeout, please modify the following option.
HTTPRequestControl.setConnectTimeout(6000)

test1 = Test(1, "${name}")
request1 = HTTPRequest.create()

<#if options??>
	<#assign options = options?eval>
	<#assign method = options["method"]>
	<#assign headers = options["headers"]>
	<#if options["body"]??>
		<#assign body = options["body"]>
	<#else>
		<#assign params = options["params"]>
	</#if>
	<#assign cookies = options["cookies"]>
</#if>
# Set headers
<#if headers?? && headers?size != 0>
headers = Headers.of(
	<#list headers as header>
	"${header["name"]?j_string}", "${header["value"]?j_string}",
	</#list>
)
<#else>
headers = Headers.of()
</#if>
<#if body??>
# Set body
body = "${body?j_string}"
<#else>
# Set parameters
<#if params?? && params?size != 0>
params = {
	<#list params as param>
	"${param["name"]?j_string}": "${param["value"]?j_string}",
	</#list>
}
<#else>
params = {}
</#if>
</#if>
# Set cookies
<#if cookies?? && cookies?size != 0>
cookies = [
	<#list cookies as cookie>
	Cookie.Builder()
		.name("${cookie["name"]?j_string}")
		.value("${cookie["value"]?j_string?replace("$", "\\$")}")
		.domain("${cookie["domain"]?j_string}")
		.path("${cookie["path"]?j_string}")
		.build(),
	</#list>
]
<#else>
cookies = []
</#if>

class TestRunner:
	# initialize a thread
	def __init__(self):
		test1.record(TestRunner.__call__)
		grinder.statistics.delayReports = True
		pass

	def before(self):
		CookieManager.addCookies(cookies)

	# test method
	def __call__(self):
		self.before()

		result = request1.${method?default("GET")}("${url}", <#if body??>body<#else>params</#if>, headers)

		# You get the message body using the string() method.
		# if result.string().find("HELLO WORLD") == -1 :
		#	 raise

		# if you want to print out log.. Don't use print keyword. Instead, use following.
		# grinder.logger.info("Hello World")

		if result.getStatusCode() == 200 :
			return
		elif result.getStatusCode() in (301, 302) :
			grinder.logger.warn("Warning. The response may not be correct. The response code was %d." %  result.getStatusCode())
			return
		else :
			raise
